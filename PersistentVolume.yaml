apiVersion: v1
# <string>指定api资源版本,格式group/version
kind: PersistentVolume
# <string>指定资源类别
metadata:
# <Object>指定元数据,内嵌字段
  name: pv-demo
  # <string>指定资源名称
  labels:
  # <map[string]string>指定标签格式为k:v,可以多个,每行一个
    app: rs-myapp
  annotations:  
  # 通过注释来定义使用什么模式的ingress controller的方式
  kubernetes.io/ingress.class: "nginx"
spec:
# <Object>指定期望状态
  hostPath:
  # <Object> hostPath类型,宿主机路径,把宿主机目录挂到pod,pod删除后数据不删除
    path: /data/pod/volume1
    # <string> -required-指定宿主路径
    type: DirectoryOrCreate
    # <string> 类型用于影响path的属性
    # DirectoryOrCreate    挂载一个已存在的目录,若不存在就创建
    # Directory    必须实现存在,不存在就报错
    # FileOrCreate    挂载一个文件不存在就创建
    # File    必须是一个文件,没有就报错
    # Socket    必须是一个Socket文件
    # CharDevice    必须是个字符类的文件
    # BlockDevice    必须是块类型的文件
    # https://kubernetes.io/docs/concepts/storage/volumes#hostpath
  nfs:
  # <Object> nfs类型,定义使用nfs,当一个卷来用,如果多目录需要写多个
  # nfs共享存储需要预先部署,例如nfs服务器共享/data/volumes
  # 会自动挂载到nfs服务器的共享目录
    path: /data/volumes
    # <string> -required- nfs共享路径
    server: 192.168.16.210
     # <string> -required-服务器地址
    readOnly: false
    # <boolean>是否设置成只读,默认false
  accessModes: ["ReadWriteMany","ReadWriteOnce"]
  # <[]string>访问模型,不同存储卷支持不同模式,具体参照下面网址
  # 访问模型,ReadWriteOnce    单路读写(RWO)
  # ReadOnlyMany    多路只读(ROX)
  # ReadWriteMany    多路读写操作(RWX) 
  # https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
  volumeMode:
  # <string> 后端存储卷模式,根据类型来选择绑定存储卷的,目前测试阶段
  capacity:
  # <map[string]string> 输出的存储空间大小
  # https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
    storage: 2Gi
    #1024单位 E, P, T, G, M, K, m    
    #1000单位 Ei, Pi, Ti, Gi, Mi, Ki